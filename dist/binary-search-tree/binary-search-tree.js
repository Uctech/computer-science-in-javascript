function BinarySearchTree(){this._root=null}BinarySearchTree.prototype={constructor:BinarySearchTree,add:function(t){var r,l={value:t,left:null,right:null};if(null===this._root)this._root=l;else for(r=this._root;;)if(t<r.value){if(null===r.left){r.left=l;break}r=r.left}else{if(!(t>r.value))break;if(null===r.right){r.right=l;break}r=r.right}},contains:function(t){for(var r=!1,l=this._root;!r&&l;)t<l.value?l=l.left:t>l.value?l=l.right:r=!0;return r},remove:function(t){for(var r,l,e,i=!1,n=null,o=this._root;!i&&o;)t<o.value?(n=o,o=o.left):t>o.value?(n=o,o=o.right):i=!0;if(i)if(r=(null!==o.left?1:0)+(null!==o.right?1:0),o===this._root)switch(r){case 0:this._root=null;break;case 1:this._root=null===o.right?o.left:o.right;break;case 2:for(l=this._root.left;null!==l.right;)e=l,l=l.right;null!==e?(e.right=l.left,l.right=this._root.right,l.left=this._root.left):l.right=this._root.right,this._root=l}else switch(r){case 0:o.value<n.value?n.left=null:n.right=null;break;case 1:o.value<n.value?n.left=null===o.left?o.right:o.left:n.right=null===o.left?o.right:o.left;break;case 2:for(l=o.left,e=o;null!==l.right;)e=l,l=l.right;e.right=l.left,l.right=o.right,l.left=o.left,o.value<n.value?n.left=l:n.right=l}},size:function(){var t=0;return this.traverse(function(r){t++}),t},toArray:function(){var t=[];return this.traverse(function(r){t.push(r.value)}),t},toString:function(){return this.toArray().toString()},traverse:function(t,r){function l(r){r&&(null!==r.left&&l(r.left),t.call(this,r),null!==r.right&&l(r.right))}function e(r){r&&(t.call(this,r),null!==r.left&&e(r.left),null!==r.right&&e(r.right))}function i(r){r&&(null!==r.left&&i(r.left),null!==r.right&&i(r.right),t.call(this,r))}switch(r=r||"in"){case"pre":e(this._root);break;case"post":i(this._root);break;case"in":default:l(this._root)}}},module.exports=BinarySearchTree;